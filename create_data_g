import math
import random
import time

import numpy as np
import matplotlib.pyplot as plt

gra = ['stepen', 'parabola', 'sin', 'cos', 'tan', 'arcsin', 'arccos', 'arctan', 'pryamaya']



#x = np.linspace(-10, 10, 100)
#y = a * x ** 2 + b * x + c

def tanh():
    for i in range(5):
        t = random.randint(1, 100)
        for j in range(2, 10, 2):
            x = np.arange(-t, t)
            a = np.array(x)
            y1 = (math.e ** (x) - math.e ** (-x)) / (math.e ** (x) + math.e ** (-x))
            plt.xlim(-11, 11)
            plt.xticks([])
            plt.yticks([])
            ax = plt.gca()  # получить текущую ось Получить объект оси
            plt.xlim(-(t + 1), t + 1)
            plt.ylim(-(np.amax(y1) + 1), (np.amax(y1) + 1))
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_tanh{i}{j}.png')
            plt.close()

def parabola():
    for i in range(1, 6, 2):
        x = np.linspace(-10*i, 10*i, 10)
        for k in range(1, 101, 20):
            a = float(random.randint(1, 100))
            b = float(random.randint(1, 100))
            c = float(random.randint(1, 100))
            y = a * (x ** 2)* (k) + b * x * (k) + c*k
            for j in range(2, 10, 2):
                #plt.xlim(-10, 10)
                fig = plt.subplots()
                ax = plt.gca()
                plt.xticks([])
                plt.yticks([])
                #plt.ylim(-np.amax(y)-1, np.amax(y)+1)
                ax.plot(x, y, color = 'k', linewidth = j)
                ax.spines['right'].set_color('none')
                ax.spines['right'].set_linewidth(7)
                ax.spines['top'].set_color('none')
                ax.spines['top'].set_linewidth(
                    7)  # Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
                ax.xaxis.set_ticks_position('bottom')
                ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
                ax.spines['bottom'].set_position(('data', 0))
                ax.spines['bottom'].set_linewidth(
                    7)  # Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
                ax.spines['left'].set_position(('data', 0))
                ax.spines['left'].set_linewidth(7)
                plt.savefig(f'/Users/nastya/Desktop/petya/saved_parabola{i}{j}{k}.png')
                plt.close()
        #time.sleep(1)

def sin():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.linspace(-10, 4*math.pi, 100)
            a = np.array(x)
            y1 = np.sin(x)
            plt.xlim(-1, 1)
            plt.ylim(-2, 4)
            plt.xticks([])
            plt.yticks([])
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_sin{i}{j}.png')
            plt.close()


def arcsin():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.arange(-1, 1, 0.001)
            y1 = np.arcsin(x)
            plt.xlim(-1, 1)
            plt.ylim(-2, 4)
            plt.xticks([])
            plt.yticks([])
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth=j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_arcsin{i}{j}.png')
            plt.close()

def arccos():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.arange(-1, 1, 0.001)
            #a = np.array(x)
            y1 = np.arccos(x)
            plt.xlim(-1.1, 1.1)
            plt.ylim(-2, 4)
            plt.xticks([])
            plt.yticks([])
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_arccos{i}{j}.png')
            plt.close()
def cos():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.linspace(-10, 4*math.pi, 100)
            a = np.array(x)
            y1 = np.cos(x)
            plt.xticks([])
            plt.yticks([])
            plt.xlim(-11, 11)
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_cos{i}{j}.png')
            plt.close()


def stepen():
    for i in range(1, 11, 2):
        x = np.linspace(-10*i, 10*i, 10)
        for k in range(1, 6):
            y = (x ** k)
            for j in range(2, 10, 2):
                fig, ax = plt.subplots()
                plt.xlim(-10*i, 10*i)
                plt.xticks([])
                plt.yticks([])
                ax.plot(x, y, color = 'k', linewidth = j)
                ax.spines['right'].set_color('none')
                ax.spines['right'].set_linewidth(7)
                ax.spines['top'].set_color('none')
                ax.spines['top'].set_linewidth(
                    7)  # Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
                ax.xaxis.set_ticks_position('bottom')
                ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
                ax.spines['bottom'].set_position(('data', 0))
                ax.spines['bottom'].set_linewidth(
                    7)  # Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
                ax.spines['left'].set_position(('data', 0))
                ax.spines['left'].set_linewidth(7)
                plt.savefig(f'/Users/nastya/Desktop/petya/saved_stepen{i}{j}{k}.png')
                plt.close()

            y = (x ** (-k))
            for j in range(2, 10, 2):
                fig, ax = plt.subplots()
                plt.xlim(-5*i, 5*i)
                plt.xticks([])
                plt.yticks([])
                ax.plot(x, y, color='k', linewidth=j)
                ax.spines['right'].set_color('none')
                ax.spines['right'].set_linewidth(7)
                ax.spines['top'].set_color('none')
                ax.spines['top'].set_linewidth(
                    7)  # Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
                ax.xaxis.set_ticks_position('bottom')
                ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
                ax.spines['bottom'].set_position(('data', 0))
                ax.spines['bottom'].set_linewidth(
                    7)  # Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
                ax.spines['left'].set_position(('data', 0))
                ax.spines['left'].set_linewidth(7)
                plt.savefig(f'/Users/nastya/Desktop/petya/saved_stepen_m{i}{j}{k}.png')
                plt.close()

def pryamaya1():
    #kx+b
    #g = random.randint(5, 10)
    x = np.linspace(-10, 10, 2)
    #x= random.randint(1, 11)
    for k in range(0, 46, 5):
        for b in range(1, 10, 3):
            a = np.tan(k)
            y = -x*a - b
            fig, ax = plt.subplots()
            plt.xlim(-11, 11)
            plt.ylim(-40, 40)
            plt.xticks([])
            plt.yticks([])
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            p = random.randint(1, 5)
            plt.plot(x, y, linestyle="-", color="black", linewidth = p)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_pryamaya_m{k}{b}.png')
            plt.close()

def pryamaya():
    #kx+b
    g = random.randint(10, 30)
    x = np.linspace(-g, g, 10)
    #x= random.randint(1, 11)
    for k in range(0, 46, 5):
        for b in range(1, 50, 10):
            a = np.tan(k)
            y = x*a + b
            fig, ax = plt.subplots()
            #plt.xlim(-x, x)
            plt.ylim(-np.amax(y), np.amax(y))
            plt.xticks([])
            plt.yticks([])
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            p = random.randint(1, 5)
            plt.plot(x, y, linestyle="-", color="black", linewidth = p)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_pryamaya{k}{b}.png')
            plt.close()




def grap():
    for i in gra:
        if i == 'parabola':
            parabola()
        elif i == 'stepen':
            stepen()
        elif i == 'tan':
            tanh()
        elif i == 'sin':
            sin()
        elif i == 'cos':
            cos()
        elif i == 'arcsin':
            arcsin()
        elif i == 'arccos':
            arccos()
        elif i == 'pryamaya':
            pryamaya1()
            pryamaya()


def parabola1():
    for i in range(1, 6, 2):
        x = np.linspace(-10*i, 10*i, 10)
        for k in range(1, 11, 2):
            a = float(random.randint(1, 10))
            b = float(random.randint(15, 50))
            c = float(random.randint(1, 10))
            y = -a * (x ** 2) + b * x * k + c*i
            for j in range(2, 10, 2):
                #plt.xlim(-10, 10)
                fig = plt.subplots()
                ax = plt.gca()
                plt.xticks([])
                plt.yticks([])
                #plt.ylim(-np.amax(y)-1, np.amax(y)+1)
                ax.plot(x, y, color = 'k', linewidth = j)
                ax.spines['right'].set_color('none')
                ax.spines['right'].set_linewidth(7)
                ax.spines['top'].set_color('none')
                ax.spines['top'].set_linewidth(
                    7)  # Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
                ax.xaxis.set_ticks_position('bottom')
                ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
                ax.spines['bottom'].set_position(('data', 0))
                ax.spines['bottom'].set_linewidth(
                    7)  # Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
                ax.spines['left'].set_position(('data', 0))
                ax.spines['left'].set_linewidth(7)
                plt.savefig(f'/Users/nastya/Desktop/petya/saved_parabola_mm_vn____{i}{j}{k}.png')
                plt.close()


def cos1():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.linspace(-10, 4*math.pi, 100)
            a = np.array(x)
            y1 = np.cos(x)
            plt.xticks([])
            plt.yticks([])
            plt.xlim(-3, 3)
            plt.ylim(-3, 3)
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_cos_33___{i}{j}.png')
            plt.close()


def sin1():
    for i in range(1):
        t = random.randint(1, 10)
        for j in range(2, 10, 2):
            x = np.linspace(-10, 4*math.pi, 100)
            a = np.array(x)
            y1 = np.sin(x)
            plt.xlim(-10, 10)
            plt.ylim(-10, 10)
            plt.xticks([])
            plt.yticks([])
            ax = plt.gca()  # получить текущую ось Получить объект оси
            ax.spines['right'].set_color('none')
            ax.spines['right'].set_linewidth(7)
            ax.spines['top'].set_color('none')
            ax.spines['top'].set_linewidth(7)# Установить пустой цвет двух сторон правой стороны, что эквивалентно стиранию двух сторон
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')  # Укажите нижнюю сторону как ось x Укажите левую сторону как ось y
            ax.spines['bottom'].set_position(('data', 0))
            ax.spines['bottom'].set_linewidth(7)# Укажите, что нижняя часть, заданная данными (то есть указанная ось x), привязана к точке 0 оси y
            ax.spines['left'].set_position(('data', 0))
            ax.spines['left'].set_linewidth(7)
            plt.plot(x, y1, linestyle="-", color="black", linewidth = j)
            plt.savefig(f'/Users/nastya/Desktop/petya/saved_sin_10_{i}{j}.png')
            plt.close()


#sin1()
grap()
#tanh()
#arccos()
#pryamaya1()
#parabola1()
