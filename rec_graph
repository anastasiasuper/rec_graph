import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import utils
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers.experimental.preprocessing import Rescaling


batch_size = 256
image_size = (100, 100)

datagen = ImageDataGenerator(rescale = 1./255)

train_dataset = image_dataset_from_directory('/Users/nastya/Documents/petya/data2',
                                             subset='training',
                                             seed=42,
                                             validation_split=0.2,
                                             batch_size=batch_size,
                                             color_mode='grayscale',
                                             image_size=image_size)

validation_dataset = image_dataset_from_directory('/Users/nastya/Documents/petya/data2',
                                            subset='validation',
                                            seed=42,
                                            validation_split=0.2,
                                            batch_size=batch_size,
                                            color_mode='grayscale',
                                            image_size=image_size)

test_dataset = image_dataset_from_directory('/Users/nastya/Documents/petya/data2',
                                            batch_size=batch_size,
                                            color_mode='grayscale',
                                            image_size=image_size)


class_names = train_dataset.class_names
print(class_names)
num = len(class_names)
plt.figure(figsize=(8, 8))

AUTOTUNE = tf.data.experimental.AUTOTUNE

train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)
validation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)
test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)


model = Sequential()

model.add(Rescaling(1./255, input_shape=(100, 100, 1)))
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding="same", kernel_initializer='he_normal', input_shape=(100, 100, 1)))
model.add(Conv2D(32, kernel_size=(5, 5), strides=2, padding='same', activation='relu'))
model.add(Conv2D(32, kernel_size=(3, 3), strides=2, padding='same', activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(64, kernel_size=(3, 3),  padding='same',activation='relu'))
model.add(Conv2D(64, kernel_size=(5, 5), strides=2, padding='same', activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(256, kernel_size=(3, 3), padding='same', activation='relu'))

model.add(Dropout(0.2))
model.add(Flatten())

model.add(Dense(512, activation='relu'))
model.add(Dense(128, activation='relu'))

model.add(Dense(num, activation='softmax'))

print(model.summary())


model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

callback = ModelCheckpoint('graph.m3', #....
              monitor='acc',
              mode='max',
              save_best_only=True)

history = model.fit(train_dataset,
                    validation_data=validation_dataset,
                    epochs=15, #тут лучше даже 10,,.,....
                    verbose=2,
                    callbacks=[callback])

scores = model.evaluate(test_dataset, verbose=1)
model.save('graph.m3')

plt.plot(history.history['accuracy'],
         label='Доля верных ответов на обучающем наборе')
plt.plot(history.history['val_accuracy'],
         label='Доля верных ответов на проверочном наборе')
plt.xlabel('Эпоха обучения')
plt.ylabel('Доля верных ответов')
plt.legend()
plt.show()
